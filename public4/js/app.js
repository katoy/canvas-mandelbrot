// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";
  var Mandelbrot, canvasOnMouseDown, mandelbrot;

  mandelbrot = null;

  $(function() {
    $("#pause").show();
    $("#cont").hide();
    mandelbrot = new Mandelbrot();
    mandelbrot.init();
    mandelbrot.setPlotMode("gray");
    mandelbrot.setIterations(50);
    mandelbrot.setZoom(100);
    mandelbrot.setPause(false);
    $("#gray").click(function() {
      mandelbrot.setPlotMode("gray");
      if (mandelbrot.getPause()) {
        return mandelbrot.iterate();
      }
    });
    $("#color32").click(function() {
      mandelbrot.setPlotMode("color32");
      if (mandelbrot.getPause()) {
        return mandelbrot.iterate();
      }
    });
    $("#iterations").change(function() {
      var v;

      v = parseInt($(this).val(), 10);
      mandelbrot.setIterations(v);
      if (mandelbrot.getPause()) {
        return mandelbrot.iterate();
      }
    });
    $('#scale').change(function() {
      var v;

      v = parseFloat($(this).val());
      mandelbrot.setZoom(v);
      if (mandelbrot.getPause()) {
        return mandelbrot.iterate();
      }
    });
    $("#x0").change(function() {
      mandelbrot.setCenter(parseFloat($(this).val()), null);
      if (mandelbrot.getPause()) {
        return mandelbrot.iterate();
      }
    });
    $("#y0").change(function() {
      mandelbrot.setCenter(null, parseFloat($(this).val()));
      if (mandelbrot.getPause()) {
        return mandelbrot.iterate();
      }
    });
    $("#pause").click(function() {
      $("#cont").show();
      $(this).hide();
      mandelbrot.setPause(true);
      return $(".editable").removeAttr("disabled");
    });
    return $("#cont").click(function() {
      $("#pause").show();
      $(this).hide();
      mandelbrot.setPause(false);
      return $(".editable").attr("disabled", "disabled");
    });
  });

  canvasOnMouseDown = function(e) {
    var canvas;

    e = e || window.event;
    canvas = $("canvas")[0];
    mandelbrot.setCenterByMouse(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
    if (mandelbrot.getPause()) {
      return mandelbrot.iterate();
    }
  };

  Mandelbrot = (function() {
    function Mandelbrot() {
      this.iterations = 120;
      this.worker_size = 10;
      this.escape = 4;
      this.count = 0;
      this.received = 0;
      this.refresh = true;
      this.pause = false;
      this.requestId = null;
    }

    Mandelbrot.prototype.init = function(width, height, view_range, x_center, y_center) {
      var container, i, self, _results;

      this.width = width != null ? width : 600;
      this.height = height != null ? height : 600;
      this.view_range = view_range != null ? view_range : 10;
      this.x_center = x_center != null ? x_center : -1.407566731001088;
      this.y_center = y_center != null ? y_center : 2.741525895538953e-10;
      self = this;
      $("#x0").val(this.x_center);
      $("#y0").val(this.y_center);
      $("#scale").val((this.width / this.view_range).toFixed(2));
      container = $("#content");
      this.canvas = document.createElement("canvas");
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      this.canvas.onmousedown = canvasOnMouseDown;
      container.append(this.canvas);
      this.context = this.canvas.getContext("2d");
      this.image = this.context.getImageData(0, 0, this.width, this.height);
      this.data = new Int32Array(this.image.data.buffer);
      this.worker_data = this.context.getImageData(0, 0, this.width, this.height / this.worker_size);
      this.pool = [];
      i = 0;
      _results = [];
      while (i < this.worker_size) {
        this.pool[i] = new Worker("js/worker.js");
        this.pool[i].idle = true;
        this.pool[i].id = i;
        this.pool[i].onerror = function(e) {
          console.log(e.message);
          console.log(e.filename);
          return console.log(e.lineno);
        };
        this.pool[i].onmessage = function(e) {
          self.context.putImageData(e.data, 0, self.height / self.worker_size * e.target.id);
          return self.received++;
        };
        _results.push(i++);
      }
      return _results;
    };

    Mandelbrot.prototype.animate = function() {
      this.requestId = requestAnimationFrame(this.animate.bind(this));
      if (this.received === this.worker_size | this.refresh) {
        this.received = 0;
        this.refresh = false;
        this.count++;
        this.view_range *= 0.95;
        $("#scale").val((this.width / this.view_range).toFixed(2));
        return this.iterate();
      }
    };

    Mandelbrot.prototype.iterate = function() {
      var i, _i, _ref, _results;

      $("#scale").val((this.width / this.view_range).toFixed(2));
      _results = [];
      for (i = _i = 0, _ref = this.pool.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.pool[i].postMessage({
          image: this.worker_data,
          id: this.pool[i].id,
          worker_size: this.worker_size,
          width: this.width,
          height: this.height,
          x_center: this.x_center,
          y_center: this.y_center,
          iterations: this.iterations,
          escape: this.escape,
          view_range: this.view_range,
          plotMode: this.plotMode
        }));
      }
      return _results;
    };

    Mandelbrot.prototype.setPlotMode = function(plotMode) {
      this.plotMode = plotMode != null ? plotMode : "gray";
    };

    Mandelbrot.prototype.setIterations = function(iterations) {
      this.iterations = iterations != null ? iterations : 100;
    };

    Mandelbrot.prototype.setZoom = function(zoom) {
      this.zoom = zoom != null ? zoom : 100;
      return this.view_range = this.width / this.zoom;
    };

    Mandelbrot.prototype.setPause = function(pause) {
      this.pause = pause != null ? pause : true;
      if (this.pause) {
        cancelAnimationFrame(this.requestId);
        this.requestId = null;
        return this.refresh = false;
      } else {
        this.refresh = true;
        return this.animate();
      }
    };

    Mandelbrot.prototype.getPause = function() {
      return this.pause;
    };

    Mandelbrot.prototype.setCenter = function(x, y) {
      if (x !== null) {
        this.x_center = x;
      }
      if (y !== null) {
        this.y_center = y;
      }
      $("#x0").val(this.x_center);
      return $("#y0").val(this.y_center);
    };

    Mandelbrot.prototype.setCenterByMouse = function(mx, my) {
      return this.setCenter(this.view_range * ((mx / this.width) - 0.5) + this.x_center, this.view_range * ((my / this.height) - 0.5) + this.y_center);
    };

    return Mandelbrot;

  })();

}).call(this);
